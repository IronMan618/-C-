!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Caesar	双向链表.c	/^void Caesar(DuLinkList *L, int i)$/;"	f
ClearList	单链表.c	/^Status ClearList(LinkList *L)$/;"	f
CreateListHead	单链表.c	/^void CreateListHead(LinkList *L, int n)$/;"	f
CreateRLinkList	循环链表.c	/^void CreateRLinkList(RLinkList *RL, int n)$/;"	f
DuLinkList	双向链表.c	/^typedef struct DualNode* DuLinkList;$/;"	t	typeref:struct:DualNode	file:
DualNode	双向链表.c	/^typedef struct DualNode$/;"	s	file:
DualNode	双向链表.c	/^}DualNode;$/;"	t	typeref:struct:DualNode	file:
ERROR	单链表.c	5;"	d	file:
ERROR	双向链表.c	5;"	d	file:
ERROR	循环链表.c	5;"	d	file:
ElemType	二进制转换到十进制（栈）.c	/^typedef char ElemType;$/;"	t	file:
ElemType	单链表.c	/^typedef int ElemType;$/;"	t	file:
ElemType	双向链表.c	/^typedef char ElemType;$/;"	t	file:
ElemType	循环链表.c	/^typedef int ElemType;$/;"	t	file:
GetElem	单链表.c	/^Status GetElem( LinkList L, int i,ElemType *e)$/;"	f
GetList	单链表.c	/^Status GetList(LinkList L)$/;"	f
GetReList	循环链表.c	/^Status GetReList(RLinkList *RL)$/;"	f
InitList	单链表.c	/^Status InitList(LinkList *L)$/;"	f
InitList	双向链表.c	/^Status InitList(DuLinkList *L)$/;"	f
InitRLinkList	循环链表.c	/^void InitRLinkList(RLinkList *RL)$/;"	f
InitStack	二进制转换到十进制（栈）.c	/^void InitStack(sqStack *s)$/;"	f
LinkList	单链表.c	/^typedef struct  Node* LinkList;$/;"	t	typeref:struct:Node	file:
Lisinsert	单链表.c	/^Status Lisinsert(LinkList *L, int i, ElemType e)$/;"	f
ListDelete	单链表.c	/^Status ListDelete(LinkList *L, int i)$/;"	f
ListLength	单链表.c	/^Status ListLength(LinkList L)$/;"	f
Node	单链表.c	/^typedef struct Node$/;"	s	file:
Node	单链表.c	/^}Node;$/;"	t	typeref:struct:Node	file:
Node	循环链表.c	/^typedef struct Node$/;"	s	file:
Node	循环链表.c	/^}Node;$/;"	t	typeref:struct:Node	file:
OK	单链表.c	6;"	d	file:
OK	双向链表.c	4;"	d	file:
OK	循环链表.c	6;"	d	file:
Pop	二进制转换到十进制（栈）.c	/^void Pop(sqStack *s, ElemType *e)$/;"	f
Push	二进制转换到十进制（栈）.c	/^void Push(sqStack *s, ElemType e)$/;"	f
RLinkList	循环链表.c	/^typedef struct Node* RLinkList;$/;"	t	typeref:struct:Node	file:
STACKINCREMENT	二进制转换到十进制（栈）.c	6;"	d	file:
STACK_INIT_SIZE	二进制转换到十进制（栈）.c	5;"	d	file:
StackLen	二进制转换到十进制（栈）.c	/^int StackLen(sqStack s)$/;"	f
Status	单链表.c	/^typedef int Status;$/;"	t	file:
Status	双向链表.c	/^typedef int Status;$/;"	t	file:
Status	循环链表.c	/^typedef int Status;$/;"	t	file:
base	二进制转换到十进制（栈）.c	/^    ElemType *base;$/;"	m	struct:__anon1	file:
data	单链表.c	/^    ElemType data;$/;"	m	struct:Node	file:
data	双向链表.c	/^    ElemType data;$/;"	m	struct:DualNode	file:
data	循环链表.c	/^    ElemType data;$/;"	m	struct:Node	file:
main	二进制转换到十进制（栈）.c	/^int main()$/;"	f
main	单链表.c	/^int main()$/;"	f
main	双向链表.c	/^int main()$/;"	f
main	循环链表.c	/^int main()$/;"	f
next	单链表.c	/^    struct Node* next;$/;"	m	struct:Node	typeref:struct:Node::Node	file:
next	双向链表.c	/^    struct DualNode *next; $/;"	m	struct:DualNode	typeref:struct:DualNode::DualNode	file:
next	循环链表.c	/^    struct Node* next;$/;"	m	struct:Node	typeref:struct:Node::Node	file:
prior	双向链表.c	/^    struct DualNode *prior;$/;"	m	struct:DualNode	typeref:struct:DualNode::DualNode	file:
sqStack	二进制转换到十进制（栈）.c	/^}sqStack;$/;"	t	typeref:struct:__anon1	file:
stackSize	二进制转换到十进制（栈）.c	/^    int stackSize;$/;"	m	struct:__anon1	file:
top	二进制转换到十进制（栈）.c	/^    ElemType *top;$/;"	m	struct:__anon1	file:
